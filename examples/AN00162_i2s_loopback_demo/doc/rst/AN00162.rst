.. include:: ../../README.rst

|newpage|

Overview
--------

Introduction
............

The XMOS |I2S| library provides software defined, industry-standard,
|I2S| (Integrated Interchip Sound) components that allows you to
stream audio between devices using xCORE GPIO ports.

|I2S| is a specific type of PCM digital audio communication using
a bit clock line, word clock line and at least one multiplexed data line.

The library includes features such as |I2S| master, |I2S| slave,
and TDM master components. This application note uses the
library to create an |I2S| master digital loopback.

Block Diagram
.............

.. figure:: images/block_diagram.drawio.*
   :width: 60%

   Application block diagram

The main application fits within one thread with a remote |I2C| task to allow
the audio hardware to be configured remotely from the other tile. This is provided
by the ``lib_board_support`` library which takes care of the audio hardware setup.

The |I2S| task calls back to the ``i2s_loopback`` task and the processing in the
``i2s_loopback`` task is performed in-between the I/O operations of |I2S|.

|I2S| loopback demo
-------------------

The Makefile
............

To start using the |I2S|, you need to add ``lib_i2s`` to your CMake Makefile::

  set(APP_DEPENDENT_MODULES   "lib_i2s")

This demo also uses the |I2C| library (``lib_i2c``) and which is brought in
automatically as a dependency of ``lib_board_support`` and is used to configure the
audio CODECs. So CMakeLists.txt also should also include::

  set(APP_DEPENDENT_MODULES     "lib_i2s"
                                "lib_board_support")

The dependancies for this example are specified by ``deps.cmake`` in the root of the ``lib_i2s`` repo
and are included in the application ``CMakeLists.txt`` file. 


Includes
........

All xC files which declare the application ``main()`` function need
to include ``platform.h``. XMOS xCORE specific defines for declaring
and initialising hardware are defined in ``xs1.h``.

.. literalinclude:: ../../src/main.xc
   :start-at: include <platform.h>
   :end-at: include <xs1.h>

The |I2S| library functions are defined in ``i2s.h``. This header must
be included in your code to use the library.

.. literalinclude:: ../../src/main.xc
   :start-at: include "i2s.h"
   :end-at: include "xk_audio_316_mc_ab/board.h"

The other include give accesss to the the board setup code.


Allocating hardware resources
.............................

An |I2S| interface requires both clock and data pins in order to
communicate with the audio CODEC device. On an xCORE
the pins are controlled by ``ports``. The ports used by the |I2S|
library are declared on the tile they reside and with their
direction and buffered nature. This loopback application uses
four 1-bit ports for input and four more for output:

.. literalinclude:: ../../src/main.xc
   :start-at: on tile[1]: in port p_mclk
   :end-at: on tile[1]: buffered in port:32 p_adc[NUM_I2S_LINES]

The xCORE also provides ``clock block`` hardware to efficiently generate
clock signal that can either be driven out on a port or used
to control a port. In this application two clocks blocks are used:

.. literalinclude:: ../../src/main.xc
   :start-at: on tile[1]: clock bclk
   :end-at: on tile[1]: clock bclk

The application main() function
...............................

The ``main()`` function in the program sets up the tasks in the application.

Firstly, the ``interfaces`` are declared. In xC interfaces provide a
means of concurrent tasks communicating with each other. In this
application there is an interface for the |I2S| master and an interface
for the |I2C| master.

.. literalinclude:: ../../src/main.xc
   :start-at: interface i2s_frame_callback_if i_i2s;
   :end-at: interface i2s_frame_callback_if i_i2s;

.. literalinclude:: ../../src/main.xc
   :start-at: interface i2c_master_if i_i2c[1]
   :end-at: interface i2c_master_if i_i2c[1]

The rest of the ``main`` function starts all the tasks in parallel
using the xC ``par`` construct:

.. literalinclude:: ../../src/main.xc
   :start-at: par {
   :end-before: return 0

This code starts the |I2S| master, the |I2C| master, the GPIO control
and the loopback application.

Before the |I2S| master runs, the system configuration is run and the
master clock is connected from the input port to the clock block and
then started. The |I2S| master task then starts and consumes a logical
core on the xCORE device.

The remaining ``i2s_loopback`` task in the ``par`` is marked with the
``[[distribute]]`` attribute. This means they will run on an existing
logical core if possible. In this case they will all share the
one logical core with the |I2S| master.

|newpage|

Configuring audio CODECs
........................

All of the audio hardware is setup using ``lib_board_support``. 
The hardware targeted is the XU316 Multichannel Audio board
(``XK-AUDIO-316-MC``).
The following lines take care of initialisation, |I2C| task start and configuration::

    xk_audio_316_mc_ab_board_setup(hw_config); // Setup must be done on tile[0]
    xk_audio_316_mc_ab_i2c_master(i_i2c);      // Run I2C master server task to allow control from tile[1]

and::

    xk_audio_316_mc_ab_AudioHwInit(i_i2c, hw_config);
    xk_audio_316_mc_ab_AudioHwConfig(i_i2c, hw_config, SAMPLE_FREQUENCY, MASTER_CLOCK_FREQUENCY, 0, DATA_BITS, DATA_BITS);


The hardware configuration is set by ``hw_config`` which in this configuration sets up the xCORE to be an |I2S| master
with the following settings:

.. literalinclude:: ../../src/main.xc
   :start-at: #define SAMPLE_FREQUENCY
   :end-at: #define NUM_I2S_LINES 


For full documentation of the ``lib_board_support`` API, please refer to the following link:
`lib_board_support <https://www.xmos.com/file/lib_board_support/>`_.

|newpage|

The i2s_loopback application
............................

The |I2S| loopback task provides the function of a digital loopback
so that all |I2S| samples received by the device will be forwarded on.

The task itself is declared as a ``[[distributable]]`` function
ensuring that it can share a logical core with other tasks. This
is an xC feature that can be enabled for any task that is of the form::

  ...
  while(1) {
    select {
      ...
    }
  }

The function takes a number of arguments:

.. literalinclude:: ../../src/main.xc
   :start-at: [[distributable]]
   :end-at: } // End i2s_loopback

The interface to the |I2S| master is a callback interface that the
|I2S| master will call over when it has received a frame data or requires a
a frame of data to send.

The |I2C| interface is used to configure the CODECs remotely.

The body of the loopback task handles the |I2S| interface calls.

The |I2S| master library calls the ``init()`` method before it starts
any data streaming. This allows the application to reset and configure
the audio CODECs, for example when the sample rate changes.

The ``receive()`` interface method is called when the master has
received a frame of audio samples (all channels in one sample period). The samples
are then stored in the ``samples`` array.

The ``send()`` interface method is called when the master needs a new
frame of samples to send. In this case the application
simply returns the frame of samples previously received.

Finally, the ``restart_check()`` method is called by the |I2S| master
once per frame and allows the application to control restart or
shutdown of the |I2S| master. In this case the application continues to
run forever and so always returns ``I2S_NO_RESTART``.

|newpage|


Building the Application
------------------------

The following section assumes you have downloaded and installed the `XMOS XTC tools <https://www.xmos.com/software-tools/>`_
(see `README` for required version). Installation instructions can be found `here <https://xmos.com/xtc-install-guide>`_.
Be sure to pay attention to the section `Installation of required third-party tools
<https://www.xmos.com/documentation/XM-014363-PC-10/html/installation/install-configure/install-tools/install_prerequisites.html>`_.

The application uses the `xcommon-cmake <https://www.xmos.com/file/xcommon-cmake-documentation/?version=latest>`_
build system as bundled with the XTC tools.

The ``AN00162_i2s_loopback_demo`` software zip-file should be downloaded and unzipped to a chosen directory.


To configure the build run the following from an XTC command prompt::

    cd examples
    cd AN00162_i2s_loopback_demo
    cmake -G "Unix Makefiles" -B build

All required dependencies are included in the software download, however, if any are missing it is
at this configure step that they will be downloaded by the build system.

Finally, the application binaries can be built using ``xmake``::

    xmake -j -C build

The application uses approximately 3 kB on Tile[0] and 7 kB on Tile[1] of 512 kB on each.

Demo hardware setup
-------------------

Please refer to the `XU316 Multichannel Audio board <https://www.xmos.com/download/XCORE_AI-Multichannel-Audio-Platform-1V1-Hardware-Manual(1V1).pdf>`_ 
hardware platform docmentation.

The demo is designed to run on the XU316 Multichannel Audio board. To run the demo:

 * Connect a USB cable from your host to the DEBUG connector.
 * Connect a USB cable from your host to the USB DEVICE connector.
 * Connect a sound source to the 3.5mm line in. Channels 1-2, 3-4, 5-6 or 7-8 can be used.
 * Connect headphones or speakers to the corresponding line out.

|newpage|

Launching the demo device
-------------------------

To run the application return to the ``/examples/AN00162_i2s_loopback_demo`` directory and run the following command::

    xrun bin/i2s_loopback_demo.xe

You should hear the audio connected to the analog input jacks looped back to the output jacks.

|newpage|

References
----------

 * XMOS Tools User Guide

   https://www.xmos.com/documentation/XM-014363-PC-9/html/

 * XMOS xCORE Programming Guide

   https://www.xmos.com/published/xmos-programming-guide

 * XMOS Libraries

   https://www.xmos.com/libraries/

 * |I2S| Protocol

   https://en.wikipedia.org/wiki/I%C2%B2S

|newpage|

Full source code listing
-------------------------

Source code for main.xc
.......................

.. literalinclude:: ../../src/main.xc

|newpage|
